#!/usr/bin/env python
#
# Tests for image fleecing (point in time snapshot export to NBD)
#
# Copyright (C) 2014 Red Hat, Inc.
#
# Based on 055.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

import time
import os
import iotests
from iotests import qemu_img, qemu_io

test_img = os.path.join(iotests.test_dir, 'test.img')
target_img = os.path.join(iotests.test_dir, 'target.img')
nbd_sock = os.path.join(iotests.test_dir, 'nbd.sock')

class TestImageFleecing(iotests.QMPTestCase):
    image_len = 64 * 1024 * 1024 # MB

    def setUp(self):
        # Write data to the image so we can compare later
        qemu_img('create', '-f', iotests.imgfmt, test_img, str(TestImageFleecing.image_len))
        self.patterns = [
                ("0x5d", "0", "64k"),
                ("0xd5", "1M", "64k"),
                ("0xdc", "32M", "64k"),
                ("0xdc", "67043328", "64k")]

        for p in self.patterns:
            qemu_io('-c', 'write -P%s %s %s' % p, test_img)

        qemu_img('create', '-f', iotests.imgfmt, target_img, str(TestImageFleecing.image_len))

        self.vm = iotests.VM().add_drive(test_img)
        self.vm.launch()

        self.overwrite_patterns = [
                ("0xa0", "0", "64k"),
                ("0x0a", "1M", "64k"),
                ("0x55", "32M", "64k"),
                ("0x56", "67043328", "64k")]

        self.nbd_uri = "nbd+unix:///drive1?socket=%s" % nbd_sock

    def tearDown(self):
        self.vm.shutdown()
        os.remove(test_img)
        os.remove(target_img)

    def verify_patterns(self):
        for p in self.patterns:
            self.assertEqual(-1, qemu_io(self.nbd_uri, '-c', 'read -P%s %s %s' % p).find("verification failed"),
                             "Failed to verify pattern: %s %s %s" % p)

    def test_image_fleecing(self):
        result = self.vm.qmp("blockdev-add", **{"options": {
            "driver": "qcow2",
            "id": "drive1",
            "file": {
                "driver": "file",
                "filename": target_img,
                },
            "backing": "drive0",
            }})
        self.assert_qmp(result, 'return', {})
        result = self.vm.qmp("nbd-server-start", **{"addr": { "type": "unix", "data": { "path": nbd_sock } } })
        self.assert_qmp(result, 'return', {})
        result = self.vm.qmp("blockdev-backup", device="drive0", target="drive1", sync="none")
        self.assert_qmp(result, 'return', {})
        result = self.vm.qmp("nbd-server-add", device="drive1")
        self.assert_qmp(result, 'return', {})

        self.verify_patterns()

        for p in self.overwrite_patterns:
            self.vm.hmp_qemu_io("drive0", "write -P%s %s %s" % p)

        self.verify_patterns()

        self.cancel_and_wait(resume=True)
        self.assert_no_active_block_jobs()

if __name__ == '__main__':
    iotests.main(supported_fmts=['raw', 'qcow2'])
